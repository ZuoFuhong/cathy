// This file is generated by rust-protobuf 2.24.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `chat_room.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_24_1;

#[derive(PartialEq,Clone,Default)]
pub struct Package {
    // message fields
    pub action: Action,
    pub content: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Package {
    fn default() -> &'a Package {
        <Package as ::protobuf::Message>::default_instance()
    }
}

impl Package {
    pub fn new() -> Package {
        ::std::default::Default::default()
    }

    // .Action action = 1;


    pub fn get_action(&self) -> Action {
        self.action
    }
    pub fn clear_action(&mut self) {
        self.action = Action::CONNECTED;
    }

    // Param is passed by value, moved
    pub fn set_action(&mut self, v: Action) {
        self.action = v;
    }

    // bytes content = 2;


    pub fn get_content(&self) -> &[u8] {
        &self.content
    }
    pub fn clear_content(&mut self) {
        self.content.clear();
    }

    // Param is passed by value, moved
    pub fn set_content(&mut self, v: ::std::vec::Vec<u8>) {
        self.content = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_content(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.content
    }

    // Take field
    pub fn take_content(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.content, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Package {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.action, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.content)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.action != Action::CONNECTED {
            my_size += ::protobuf::rt::enum_size(1, self.action);
        }
        if !self.content.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.content);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.action != Action::CONNECTED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.action))?;
        }
        if !self.content.is_empty() {
            os.write_bytes(2, &self.content)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Package {
        Package::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Action>>(
                "action",
                |m: &Package| { &m.action },
                |m: &mut Package| { &mut m.action },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "content",
                |m: &Package| { &m.content },
                |m: &mut Package| { &mut m.content },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Package>(
                "Package",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Package {
        static instance: ::protobuf::rt::LazyV2<Package> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Package::new)
    }
}

impl ::protobuf::Clear for Package {
    fn clear(&mut self) {
        self.action = Action::CONNECTED;
        self.content.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Package {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Package {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConnectedReply {
    // message fields
    pub uid: u64,
    pub session_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConnectedReply {
    fn default() -> &'a ConnectedReply {
        <ConnectedReply as ::protobuf::Message>::default_instance()
    }
}

impl ConnectedReply {
    pub fn new() -> ConnectedReply {
        ::std::default::Default::default()
    }

    // uint64 uid = 1;


    pub fn get_uid(&self) -> u64 {
        self.uid
    }
    pub fn clear_uid(&mut self) {
        self.uid = 0;
    }

    // Param is passed by value, moved
    pub fn set_uid(&mut self, v: u64) {
        self.uid = v;
    }

    // string session_id = 2;


    pub fn get_session_id(&self) -> &str {
        &self.session_id
    }
    pub fn clear_session_id(&mut self) {
        self.session_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_session_id(&mut self, v: ::std::string::String) {
        self.session_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_session_id(&mut self) -> &mut ::std::string::String {
        &mut self.session_id
    }

    // Take field
    pub fn take_session_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.session_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ConnectedReply {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.uid = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.session_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.uid != 0 {
            my_size += ::protobuf::rt::value_size(1, self.uid, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.session_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.session_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.uid != 0 {
            os.write_uint64(1, self.uid)?;
        }
        if !self.session_id.is_empty() {
            os.write_string(2, &self.session_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConnectedReply {
        ConnectedReply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "uid",
                |m: &ConnectedReply| { &m.uid },
                |m: &mut ConnectedReply| { &mut m.uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "session_id",
                |m: &ConnectedReply| { &m.session_id },
                |m: &mut ConnectedReply| { &mut m.session_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConnectedReply>(
                "ConnectedReply",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConnectedReply {
        static instance: ::protobuf::rt::LazyV2<ConnectedReply> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConnectedReply::new)
    }
}

impl ::protobuf::Clear for ConnectedReply {
    fn clear(&mut self) {
        self.uid = 0;
        self.session_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConnectedReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConnectedReply {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgToUser {
    // message fields
    pub seq: u64,
    pub sender_uid: u64,
    pub receiver_uid: u64,
    pub message_id: u64,
    pub content: ::std::string::String,
    pub timestamp: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgToUser {
    fn default() -> &'a MsgToUser {
        <MsgToUser as ::protobuf::Message>::default_instance()
    }
}

impl MsgToUser {
    pub fn new() -> MsgToUser {
        ::std::default::Default::default()
    }

    // uint64 seq = 1;


    pub fn get_seq(&self) -> u64 {
        self.seq
    }
    pub fn clear_seq(&mut self) {
        self.seq = 0;
    }

    // Param is passed by value, moved
    pub fn set_seq(&mut self, v: u64) {
        self.seq = v;
    }

    // uint64 sender_uid = 2;


    pub fn get_sender_uid(&self) -> u64 {
        self.sender_uid
    }
    pub fn clear_sender_uid(&mut self) {
        self.sender_uid = 0;
    }

    // Param is passed by value, moved
    pub fn set_sender_uid(&mut self, v: u64) {
        self.sender_uid = v;
    }

    // uint64 receiver_uid = 3;


    pub fn get_receiver_uid(&self) -> u64 {
        self.receiver_uid
    }
    pub fn clear_receiver_uid(&mut self) {
        self.receiver_uid = 0;
    }

    // Param is passed by value, moved
    pub fn set_receiver_uid(&mut self, v: u64) {
        self.receiver_uid = v;
    }

    // uint64 message_id = 4;


    pub fn get_message_id(&self) -> u64 {
        self.message_id
    }
    pub fn clear_message_id(&mut self) {
        self.message_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_message_id(&mut self, v: u64) {
        self.message_id = v;
    }

    // string content = 5;


    pub fn get_content(&self) -> &str {
        &self.content
    }
    pub fn clear_content(&mut self) {
        self.content.clear();
    }

    // Param is passed by value, moved
    pub fn set_content(&mut self, v: ::std::string::String) {
        self.content = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_content(&mut self) -> &mut ::std::string::String {
        &mut self.content
    }

    // Take field
    pub fn take_content(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.content, ::std::string::String::new())
    }

    // uint64 timestamp = 6;


    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }
}

impl ::protobuf::Message for MsgToUser {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.seq = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sender_uid = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.receiver_uid = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.message_id = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.content)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.seq != 0 {
            my_size += ::protobuf::rt::value_size(1, self.seq, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.sender_uid != 0 {
            my_size += ::protobuf::rt::value_size(2, self.sender_uid, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.receiver_uid != 0 {
            my_size += ::protobuf::rt::value_size(3, self.receiver_uid, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.message_id != 0 {
            my_size += ::protobuf::rt::value_size(4, self.message_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.content.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.content);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(6, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.seq != 0 {
            os.write_uint64(1, self.seq)?;
        }
        if self.sender_uid != 0 {
            os.write_uint64(2, self.sender_uid)?;
        }
        if self.receiver_uid != 0 {
            os.write_uint64(3, self.receiver_uid)?;
        }
        if self.message_id != 0 {
            os.write_uint64(4, self.message_id)?;
        }
        if !self.content.is_empty() {
            os.write_string(5, &self.content)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(6, self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgToUser {
        MsgToUser::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "seq",
                |m: &MsgToUser| { &m.seq },
                |m: &mut MsgToUser| { &mut m.seq },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "sender_uid",
                |m: &MsgToUser| { &m.sender_uid },
                |m: &mut MsgToUser| { &mut m.sender_uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "receiver_uid",
                |m: &MsgToUser| { &m.receiver_uid },
                |m: &mut MsgToUser| { &mut m.receiver_uid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "message_id",
                |m: &MsgToUser| { &m.message_id },
                |m: &mut MsgToUser| { &mut m.message_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "content",
                |m: &MsgToUser| { &m.content },
                |m: &mut MsgToUser| { &mut m.content },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "timestamp",
                |m: &MsgToUser| { &m.timestamp },
                |m: &mut MsgToUser| { &mut m.timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgToUser>(
                "MsgToUser",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgToUser {
        static instance: ::protobuf::rt::LazyV2<MsgToUser> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgToUser::new)
    }
}

impl ::protobuf::Clear for MsgToUser {
    fn clear(&mut self) {
        self.seq = 0;
        self.sender_uid = 0;
        self.receiver_uid = 0;
        self.message_id = 0;
        self.content.clear();
        self.timestamp = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgToUser {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgToUser {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Action {
    CONNECTED = 0,
    HEARTBEAT = 1,
    MSG_TO_USER = 2,
}

impl ::protobuf::ProtobufEnum for Action {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Action> {
        match value {
            0 => ::std::option::Option::Some(Action::CONNECTED),
            1 => ::std::option::Option::Some(Action::HEARTBEAT),
            2 => ::std::option::Option::Some(Action::MSG_TO_USER),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Action] = &[
            Action::CONNECTED,
            Action::HEARTBEAT,
            Action::MSG_TO_USER,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Action>("Action", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Action {
}

impl ::std::default::Default for Action {
    fn default() -> Self {
        Action::CONNECTED
    }
}

impl ::protobuf::reflect::ProtobufValue for Action {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fchat_room.proto\"D\n\x07Package\x12\x1f\n\x06action\x18\x01\x20\
    \x01(\x0e2\x07.ActionR\x06action\x12\x18\n\x07content\x18\x02\x20\x01(\
    \x0cR\x07content\"A\n\x0eConnectedReply\x12\x10\n\x03uid\x18\x01\x20\x01\
    (\x04R\x03uid\x12\x1d\n\nsession_id\x18\x02\x20\x01(\tR\tsessionId\"\xb6\
    \x01\n\tMsgToUser\x12\x10\n\x03seq\x18\x01\x20\x01(\x04R\x03seq\x12\x1d\
    \n\nsender_uid\x18\x02\x20\x01(\x04R\tsenderUid\x12!\n\x0creceiver_uid\
    \x18\x03\x20\x01(\x04R\x0breceiverUid\x12\x1d\n\nmessage_id\x18\x04\x20\
    \x01(\x04R\tmessageId\x12\x18\n\x07content\x18\x05\x20\x01(\tR\x07conten\
    t\x12\x1c\n\ttimestamp\x18\x06\x20\x01(\x04R\ttimestamp*7\n\x06Action\
    \x12\r\n\tCONNECTED\x10\0\x12\r\n\tHEARTBEAT\x10\x01\x12\x0f\n\x0bMSG_TO\
    _USER\x10\x02J\xb7\x07\n\x06\x12\x04\0\0\x19\x01\n\x08\n\x01\x0c\x12\x03\
    \0\0\x12\n\n\n\x02\x05\0\x12\x04\x02\0\x06\x01\n\n\n\x03\x05\0\x01\x12\
    \x03\x02\x05\x0b\n\x1b\n\x04\x05\0\x02\0\x12\x03\x03\x02\x12\"\x0e\x20\
    \xe8\xbf\x9e\xe6\x8e\xa5\xe6\x88\x90\xe5\x8a\x9f\n\n\x0c\n\x05\x05\0\x02\
    \0\x01\x12\x03\x03\x02\x0b\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x03\x10\
    \x11\n\x1b\n\x04\x05\0\x02\x01\x12\x03\x04\x02\x12\"\x0e\x20\xe5\xbf\x83\
    \xe8\xb7\xb3\xe6\xa3\x80\xe6\xb5\x8b\n\n\x0c\n\x05\x05\0\x02\x01\x01\x12\
    \x03\x04\x02\x0b\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x04\x10\x11\n!\n\
    \x04\x05\0\x02\x02\x12\x03\x05\x02\x12\"\x14\x20\xe5\x8f\x91\xe6\xb6\x88\
    \xe6\x81\xaf\xe5\x88\xb0\xe7\x94\xa8\xe6\x88\xb7\n\n\x0c\n\x05\x05\0\x02\
    \x02\x01\x12\x03\x05\x02\r\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x05\x10\
    \x11\n\n\n\x02\x04\0\x12\x04\x08\0\x0b\x01\n\n\n\x03\x04\0\x01\x12\x03\
    \x08\x08\x0f\n\x0b\n\x04\x04\0\x02\0\x12\x03\t\x02\x15\n\x0c\n\x05\x04\0\
    \x02\0\x06\x12\x03\t\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\t\t\x0f\
    \n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\t\x13\x14\n\x0b\n\x04\x04\0\x02\x01\
    \x12\x03\n\x02\x15\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\n\x02\x07\n\x0c\
    \n\x05\x04\0\x02\x01\x01\x12\x03\n\t\x10\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\n\x13\x14\n\n\n\x02\x04\x01\x12\x04\r\0\x10\x01\n\n\n\x03\x04\
    \x01\x01\x12\x03\r\x08\x16\n\x17\n\x04\x04\x01\x02\0\x12\x03\x0e\x02\x18\
    \"\n\x20\xe7\x94\xa8\xe6\x88\xb7ID\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\
    \x03\x0e\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0e\t\x0c\n\x0c\n\
    \x05\x04\x01\x02\0\x03\x12\x03\x0e\x16\x17\n\x17\n\x04\x04\x01\x02\x01\
    \x12\x03\x0f\x02\x18\"\n\x20\xe4\xbc\x9a\xe8\xaf\x9dID\n\n\x0c\n\x05\x04\
    \x01\x02\x01\x05\x12\x03\x0f\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\
    \x03\x0f\t\x13\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x0f\x16\x17\n\n\n\
    \x02\x04\x02\x12\x04\x12\0\x19\x01\n\n\n\x03\x04\x02\x01\x12\x03\x12\x08\
    \x11\n\x1e\n\x04\x04\x02\x02\0\x12\x03\x13\x02\x1a\"\x11\x20\xe6\xb6\x88\
    \xe6\x81\xaf\xe5\xba\x8f\xe5\x88\x97\xe5\x8f\xb7\n\n\x0c\n\x05\x04\x02\
    \x02\0\x05\x12\x03\x13\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x13\
    \t\x0c\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x13\x18\x19\n\x18\n\x04\x04\
    \x02\x02\x01\x12\x03\x14\x02\x1a\"\x0b\x20\xe5\x8f\x91\xe9\x80\x81\xe6\
    \x96\xb9\n\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x14\x02\x08\n\x0c\n\
    \x05\x04\x02\x02\x01\x01\x12\x03\x14\t\x13\n\x0c\n\x05\x04\x02\x02\x01\
    \x03\x12\x03\x14\x18\x19\n\x18\n\x04\x04\x02\x02\x02\x12\x03\x15\x02\x1a\
    \"\x0b\x20\xe6\x8e\xa5\xe6\x94\xb6\xe6\x96\xb9\n\n\x0c\n\x05\x04\x02\x02\
    \x02\x05\x12\x03\x15\x02\x08\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x15\
    \t\x15\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\x15\x18\x19\n\x17\n\x04\
    \x04\x02\x02\x03\x12\x03\x16\x02\x1a\"\n\x20\xe6\xb6\x88\xe6\x81\xafID\n\
    \n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03\x16\x02\x08\n\x0c\n\x05\x04\x02\
    \x02\x03\x01\x12\x03\x16\t\x13\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03\
    \x16\x18\x19\n\x1b\n\x04\x04\x02\x02\x04\x12\x03\x17\x02\x1a\"\x0e\x20\
    \xe6\xb6\x88\xe6\x81\xaf\xe5\x86\x85\xe5\xae\xb9\n\n\x0c\n\x05\x04\x02\
    \x02\x04\x05\x12\x03\x17\x02\x08\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\x03\
    \x17\t\x10\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03\x17\x18\x19\n\x18\n\
    \x04\x04\x02\x02\x05\x12\x03\x18\x02\x1a\"\x0b\x20\xe6\x97\xb6\xe9\x97\
    \xb4\xe6\x88\xb3\n\n\x0c\n\x05\x04\x02\x02\x05\x05\x12\x03\x18\x02\x08\n\
    \x0c\n\x05\x04\x02\x02\x05\x01\x12\x03\x18\t\x12\n\x0c\n\x05\x04\x02\x02\
    \x05\x03\x12\x03\x18\x18\x19b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
